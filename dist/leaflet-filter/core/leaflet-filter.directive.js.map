{"version":3,"sources":["leaflet-filter/core/leaflet-filter.directive.ts"],"names":[],"mappings":"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","file":"leaflet-filter.directive.js","sourcesContent":["import { Directive, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\nimport '@asymmetrik/leaflet-filter';\n\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/angular2-leaflet';\n\n\n@Directive({\n\tselector: '[leafletFilter]'\n})\nexport class LeafletFilterDirective\n\timplements OnChanges, OnInit {\n\n\tleafletDirective: LeafletDirectiveWrapper;\n\n\t// Filter Control\n\tfilterControl: L.Control.FilterControl;\n\tfeatureGroup: L.FeatureGroup;\n\n\t// Constructor options for Filter Control\n\t@Input('leafletFilterOptions') filterOptions: L.Control.FilterControlOptions = null;\n\n\t// Filter state\n\t@Input('leafletFilterState') filterState: any;\n\n\t// Event Emitter for filter state change events\n\t@Output('leafletFilterStateChange') filterStateChange = new EventEmitter<any>();\n\n\t// Event for when the filter control is created and ready\n\t@Output('leafletFilterControlReady') controlReady = new EventEmitter<L.Control.FilterControl>();\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\n\t\tthis.leafletDirective.init();\n\n\t\t// Initialize the draw options (in case they weren't provided)\n\t\tthis.filterOptions = this.initializeFilterOptions(this.filterOptions);\n\n\t\t// Create the control\n\t\tthis.filterControl =  L.control.filter(this.filterOptions);\n\n\t\t// Pull out the feature group for convenience\n\t\tthis.featureGroup = this.filterOptions.featureGroup;\n\n\t\t// Add the control to the map\n\t\tthis.filterControl.addTo(this.leafletDirective.getMap());\n\n\t\t// Register the main handler for events coming from the draw plugin\n\t\tthis.leafletDirective.getMap().on('filter:filter', (e: any) => {\n\t\t\tsetTimeout(() => { this.filterStateChange.emit(e.geo); });\n\t\t});\n\n\t\t// Set the initial filter state\n\t\tthis.filterControl.setFilter(this.filterState);\n\n\t\t// Fire control ready event\n\t\tthis.controlReady.emit(this.filterControl);\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the filter state\n\t\tif (changes['filterState']) {\n\n\t\t\t// Only want to set the filter if the control exists\n\t\t\tif (null != this.filterControl) {\n\t\t\t\tthis.filterControl.setFilter(changes['filterState'].currentValue);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tinitializeFilterOptions(options: L.Control.FilterControlOptions) {\n\n\t\t// Ensure the options have a featureGroup\n\t\tif (null == options) {\n\t\t\toptions = {\n\t\t\t\tfeatureGroup: null\n\t\t\t};\n\t\t}\n\t\tif (null == options.featureGroup) {\n\t\t\t// No feature group was provided, so we're going to add it ourselves\n\t\t\toptions.featureGroup = L.featureGroup();\n\t\t\tthis.leafletDirective.getMap().addLayer(options.featureGroup);\n\t\t}\n\n\t\treturn options;\n\t}\n}\n"]}