{"version":3,"sources":["leaflet-filter/core/leaflet-filter.directive.ts"],"names":[],"mappings":";AAAA,qBAAwF,eAAe,CAAC,CAAA;AAExG,IAAY,CAAC,WAAM,SAAS,CAAC,CAAA;AAC7B,QAAO,4BAA4B,CAAC,CAAA;AAEpC,iCAAiC,8BAA8B,CAAC,CAAA;AAMhE;IAsBC,gCAAY,gBAAkC;QAV9C,yCAAyC;QACV,kBAAa,GAAmC,IAAI,CAAC;QAKpF,+CAA+C;QACX,sBAAiB,GAAsB,IAAI,mBAAY,EAAO,CAAC;QAIlG,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC1C,CAAC;IAED,yCAAQ,GAAR;QAAA,iBAwBC;QAtBA,wCAAwC;QACxC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAE1C,8DAA8D;QAC9D,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEtE,qBAAqB;QACrB,IAAI,CAAC,aAAa,GAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE3D,6CAA6C;QAC7C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;QAEpD,6BAA6B;QAC7B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEnC,mEAAmE;QACnE,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,EAAE,UAAC,CAAM;YACnC,UAAU,CAAC,cAAQ,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAED,4CAAW,GAAX,UAAY,OAAwC;QAEnD,uBAAuB;QACvB,EAAE,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAE5B,oDAAoD;YACpD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,YAAY,CAAC,CAAC;YACnE,CAAC;QAEF,CAAC;IAEF,CAAC;IAED,wDAAuB,GAAvB,UAAwB,OAAuC;QAE9D,yCAAyC;QACzC,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;YACrB,OAAO,GAAG;gBACT,YAAY,EAAE,IAAI;aAClB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;YAClC,oEAAoE;YACpE,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC;YACxC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;IApED;QAAC,YAAK,CAAC,sBAAsB,CAAC;;iEAAA;IAG9B;QAAC,YAAK,CAAC,oBAAoB,CAAC;;+DAAA;IAG5B;QAAC,aAAM,CAAC,0BAA0B,CAAC;;qEAAA;IAtBpC;QAAC,gBAAS,CAAC;YACV,QAAQ,EAAE,kBAAkB;SAC5B,CAAC;;8BAAA;IAmFF,6BAAC;AAAD,CAlFA,AAkFC,IAAA;AAlFY,8BAAsB,yBAkFlC,CAAA","file":"leaflet-filter.directive.js","sourcesContent":["import { Directive, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport * as L from 'leaflet';\nimport '@asymmetrik/leaflet-filter';\n\nimport { LeafletDirective } from '@asymmetrik/angular2-leaflet';\n\n\n@Directive({\n\tselector: '[leaflet-filter]'\n})\nexport class LeafletFilterDirective\n\timplements OnChanges, OnInit {\n\n\tleafletDirective: LeafletDirective;\n\n\t// Reference to the primary map object\n\tmap: L.Map;\n\n\t// Filter Control\n\tfilterControl: L.Control.FilterControl;\n\tfeatureGroup: L.FeatureGroup;\n\n\t// Constructor options for Filter Control\n\t@Input('leafletFilterOptions') filterOptions: L.Control.FilterControlOptions = null;\n\n\t// Filter state\n\t@Input('leafletFilterState') filterState: any;\n\n\t// Event Emitter for filter state change events\n\t@Output('leafletFilterStateChange') filterStateChange: EventEmitter<any> = new EventEmitter<any>();\n\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = leafletDirective;\n\t}\n\n\tngOnInit() {\n\n\t\t// Get the map from the parent directive\n\t\tthis.map = this.leafletDirective.getMap();\n\n\t\t// Initialize the draw options (in case they weren't provided)\n\t\tthis.filterOptions = this.initializeFilterOptions(this.filterOptions);\n\n\t\t// Create the control\n\t\tthis.filterControl =  L.control.filter(this.filterOptions);\n\n\t\t// Pull out the feature group for convenience\n\t\tthis.featureGroup = this.filterOptions.featureGroup;\n\n\t\t// Add the control to the map\n\t\tthis.filterControl.addTo(this.map);\n\n\t\t// Register the main handler for events coming from the draw plugin\n\t\tthis.map.on('filter:filter', (e: any) => {\n\t\t\tsetTimeout(() => { this.filterStateChange.emit(e.geo); });\n\t\t});\n\n\t\t// Set the initial filter state\n\t\tthis.filterControl.setFilter(this.filterState);\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the filter state\n\t\tif (changes['filterState']) {\n\n\t\t\t// Only want to set the filter if the control exists\n\t\t\tif (null != this.filterControl) {\n\t\t\t\tthis.filterControl.setFilter(changes['filterState'].currentValue);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tinitializeFilterOptions(options: L.Control.FilterControlOptions) {\n\n\t\t// Ensure the options have a featureGroup\n\t\tif (null == options) {\n\t\t\toptions = {\n\t\t\t\tfeatureGroup: null\n\t\t\t};\n\t\t}\n\t\tif (null == options.featureGroup) {\n\t\t\t// No feature group was provided, so we're going to add it ourselves\n\t\t\toptions.featureGroup = L.featureGroup();\n\t\t\tthis.map.addLayer(options.featureGroup);\n\t\t}\n\n\t\treturn options;\n\t}\n}\n"]}